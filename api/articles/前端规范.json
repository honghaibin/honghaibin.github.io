{"title":"论一名前端工程师の自我修养","slug":"前端规范","date":"2017-05-22T13:42:00.000Z","updated":"2017-05-23T01:39:21.606Z","comments":true,"excerpt":"","content":"<h1 id=\"1-可维护性\"><a href=\"#1-可维护性\" class=\"headerlink\" title=\"1. 可维护性\"></a>1. 可维护性</h1><blockquote>\n<p>很多时候，我们不是从零开始，开发新代码。而是去维护别人的代码，以他人的工作成果为基础。确保自己的代码可维护，是赠人玫瑰，\n手留余香的好事。一方面让别人看的舒服，另一方面也防止自己长时间没看过自己的代码，自己都难以理解。</p>\n</blockquote>\n<h2 id=\"1-1-什么是可维护性代码\"><a href=\"#1-1-什么是可维护性代码\" class=\"headerlink\" title=\"1.1 什么是可维护性代码\"></a>1.1 什么是可维护性代码</h2><blockquote>\n<p>可维护性代码的一些特征：</p>\n<ul>\n<li><strong>可理解</strong> ：易于理解代码的用途</li>\n<li><strong>可适应</strong> ：数据的变化，不需要完全重写代码</li>\n<li><strong>可扩展</strong> ：要考虑未来对核心功能的扩展</li>\n<li><strong>可调试</strong> ：给出足够的信息，让调试的时候，确定问题所在</li>\n<li><strong>不可分割</strong> ：函数的功能要单一，功能粒度不可分割，可复用性增强</li>\n</ul>\n</blockquote>\n<h2 id=\"1-2-代码约定\"><a href=\"#1-2-代码约定\" class=\"headerlink\" title=\"1.2 代码约定\"></a>1.2 代码约定</h2><p><strong>1.2.1 可读性</strong></p>\n<ul>\n<li><strong>统一的缩进方式</strong> ： 一般使用4个空格，不用制表符是因为制表符在不同的编辑器里的效果不同。</li>\n<li><strong>注释</strong> ： 函数和方法、大段代码、复杂的算法、hack</li>\n<li><strong>空白行</strong> ： 方法之间、方法里的局部变量和第一个语句之间、单行或者多行注释之间、方法内依个逻辑单元之间</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Good</div><div class=\"line\">if (wl &amp;&amp; wl.length) &#123;</div><div class=\"line\"></div><div class=\"line\">    for (i = 0, l = wl.length; i &lt; l; ++i) &#123;</div><div class=\"line\">        p = wl[i];</div><div class=\"line\">        type = Y.Lang.type(r[p]);</div><div class=\"line\"></div><div class=\"line\">        if (s.hasOwnProperty(p)) &#123;</div><div class=\"line\"></div><div class=\"line\">            if (merge &amp;&amp; type == &apos;object&apos;) &#123;</div><div class=\"line\">                Y.mix(r[p], s[p]);</div><div class=\"line\">            &#125; else if (ov || !(p in r)) &#123;</div><div class=\"line\">                r[p] = s[p];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>1.2.2 变量名和函数名</strong></p>\n<ul>\n<li><em>驼峰命名法</em></li>\n<li><em>变量名以名词开头</em></li>\n<li><em>方法名以动词开头</em></li>\n<li><em>常量全部大写</em></li>\n<li><em>构造函数以大写字母开头</em></li>\n<li><em>jquery对象以“$”符号开头</em></li>\n</ul>\n<blockquote>\n<p>变量命名不仅仅是一种科学，更是一种艺术。总之，要短小精悍，见名知意。有些名词可以反应出变量的类型。</p>\n</blockquote>\n<ul>\n<li><p>变量名：</p>\n<table>\n  <thead>\n      <tr>\n          <td>名词</td>\n          <td>数据类型含义</td>\n      </tr>\n  </thead>\n  <tbody>\n      <tr>\n          <td>count,length,size</td>\n          <td>数值</td>\n      </tr>\n      <tr>\n          <td>name,title,message</td>\n          <td>字符串</td>\n      </tr>\n      <tr>\n          <td>i,j,k</td>\n          <td>用来循环</td>\n      </tr>\n      <tr>\n          <td>car,person,student,user</td>\n          <td>对象</td>\n      </tr>\n      <tr>\n          <td>success,fail</td>\n          <td>布尔值</td>\n      </tr>\n      <tr>\n          <td>payload</td>\n          <td>post数据的请求体</td>\n      </tr>\n      <tr>\n          <td>method</td>\n          <td>请求方式</td>\n      </tr>\n  </tbody>\n</table>\n</li>\n<li><p>函数名：</p>\n<table>\n  <thead>\n      <tr>\n          <th>动词</th>\n          <th>用法</th>\n      </tr>\n  </thead>\n  <tbody>\n      <tr>\n          <td>resend</td>\n          <td>重发</td>\n      </tr>\n      <tr>\n          <td>validate</td>\n          <td>验证</td>\n      </tr>\n      <tr>\n          <td>query</td>\n          <td>查询</td>\n      </tr>\n      <tr>\n          <td>create</td>\n          <td>创建</td>\n      </tr>\n      <tr>\n          <td>add</td>\n          <td>添加</td>\n      </tr>\n      <tr>\n          <td>delete</td>\n          <td>删除</td>\n      </tr>\n      <tr>\n          <td>remove</td>\n          <td>移除</td>\n      </tr>\n      <tr>\n          <td>insert</td>\n          <td>插入</td>\n      </tr>\n      <tr>\n          <td>update</td>\n          <td>更新</td>\n      </tr>\n      <tr>\n          <td>copy</td>\n          <td>复制</td>\n      </tr>\n      <tr>\n          <td>render</td>\n          <td>渲染</td>\n      </tr>\n      <tr>\n          <td>close</td>\n          <td>关闭</td>\n      </tr>\n      <tr>\n          <td>open</td>\n          <td>开启</td>\n      </tr>\n      <tr>\n          <td>clear</td>\n          <td>清除</td>\n      </tr>\n      <tr>\n          <td>edit</td>\n          <td>编辑</td>\n      </tr>\n      <tr>\n          <td>on</td>\n          <td>当事件发生</td>\n      </tr>\n      <tr>\n          <td>list</td>\n          <td>渲染一个列表，例如 <em>listUsersList()</em> 或 <em>listUsers()</em></td>\n      </tr>\n  </tbody>\n</table>\n</li>\n<li><p>接口常用的动词：</p>\n<table>\n  <thead>\n      <tr>\n          <th>含义</th>\n          <th>请求方法</th>\n          <th>词语</th>\n          <th>例子</th>\n      </tr>\n  </thead>\n  <tbody>\n      <tr>\n          <td>增加</td>\n          <td>post</td>\n          <td>create</td>\n          <td>createUser</td>\n      </tr>\n      <tr>\n          <td>删除</td>\n          <td>delete</td>\n          <td>delete</td>\n          <td>deleteUser</td>\n      </tr>\n      <tr>\n          <td>修改</td>\n          <td>update</td>\n          <td>update</td>\n          <td>updateUser</td>\n      </tr>\n      <tr>\n          <td>查询</td>\n          <td>get</td>\n          <td>get,query</td>\n          <td>getUser,queryUser(无条件查询用get，有条件的查询用query)</td>\n      </tr>\n  </tbody>\n</table>\n</li>\n<li><p>学会使用单复数命名函数：</p>\n<table>\n  <thead>\n      <tr>\n          <th>函数名</th>\n          <th>含义</th>\n      </tr>\n  </thead>\n  <tbody>\n      <tr>\n          <td>getUser()</td>\n          <td>获取一个用户，一般是通过唯一的id来获取</td>\n      </tr>\n      <tr>\n          <td>getUsers()</td>\n          <td>获取一类用户，一般是通过一些条件来获取</td>\n      </tr>\n      <tr>\n          <td>createUser()</td>\n          <td>创建一个用户</td>\n      </tr>\n      <tr>\n          <td>createUsers()</td>\n          <td>批量创建用户</td>\n      </tr>\n  </tbody>\n</table>\n</li>\n<li><p>常量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var MAX_COUNT= 10;</div><div class=\"line\">var URL= &quot;http://material.io&quot;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>构造函数：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Good</div><div class=\"line\">function Person(name) &#123;</div><div class=\"line\">    this.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype.sayName = function() &#123;</div><div class=\"line\">    alert(this.name);</div><div class=\"line\">&#125;;</div><div class=\"line\">var me = new Person(&quot;wdd&quot;);</div></pre></td></tr></table></figure>\n<ul>\n<li>底层http请求接口函数：</li>\n</ul>\n<blockquote>\n<p>建议使用“_”开头，例如App._getUsers();而对于接口函数的封装，例如App.getUsers()，内部逻辑调用App._getUsers();</p>\n</blockquote>\n<p><strong>1.2.3 文件名</strong></p>\n<pre><code>* 全部使用小写字母\n* 单词之间用“_”间隔\n</code></pre><p>eg:\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">app-main.js</div><div class=\"line\">app-event.js</div></pre></td></tr></table></figure></p>\n<p><strong>1.2.4 文件归类</strong></p>\n<blockquote>\n<p>自己写的js最好和第三方插件放置在不同的文件夹下。</p>\n</blockquote>\n<p><strong>1.2.5 alert只用于调试</strong></p>\n<blockquote>\n<ul>\n<li>如果你用alert来显示提醒消息，那么用户除了点击alert上的的确定按钮外，就只能点击上面的关闭，或者选择禁止再选择对话框，除此以外什么都不能操作。</li>\n<li>有些浏览器如果禁止了alert的选项，那么你的alert是不会显示的</li>\n<li>如果你在try catch语句里使用alert，那么console里将不会输出错误信息，你都没办法查看错误的详细原因，以及储出错的位置。</li>\n</ul>\n</blockquote>\n<p>优雅的方式：</p>\n<blockquote>\n<ul>\n<li>console.log() 普通提示消息\nconsole.error() 错误提示消息\nconsole.info() 信息提示消息\nconsole.warn() 警告提示消息</li>\n</ul>\n</blockquote>\n<h2 id=\"1-3-松散耦合\"><a href=\"#1-3-松散耦合\" class=\"headerlink\" title=\"1.3 松散耦合\"></a>1.3 松散耦合</h2><blockquote>\n<ul>\n<li>html文件最好避免写js语句</li>\n<li>尽量避免在js更改某个css类的属性，而使用更改类的方法</li>\n<li>解耦应用逻辑和事件处理程序</li>\n</ul>\n</blockquote>\n<p><strong>1.3.1 将应用逻辑和事件处理程序解耦</strong></p>\n<ul>\n<li>错误的做法：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//一般事件订阅的写法，以jQuery的写法为栗子</div><div class=\"line\">$(document).on(&apos;click&apos;,&apos;#btn-get-users&apos;,function(event)&#123;</div><div class=\"line\">    event.stopPropagation();</div><div class=\"line\"></div><div class=\"line\">    //下面的省略号表示执行获取所有用于并显示在页面上的逻辑</div><div class=\"line\">    // Bad</div><div class=\"line\">    ...</div><div class=\"line\">    ...</div><div class=\"line\">    ...</div><div class=\"line\">    //</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果增加了需求，当点击另外一个按钮的时候，也要执行获取所有用户并显示在页面上，那么上面省略的代码又要复制一份。如果接口有改动，那么需要在两个不同的地方都要修改。所以，应该这样。\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(document).on(&apos;click&apos;,&apos;#btn-get-users&apos;,function(event)&#123;</div><div class=\"line\">    event.stopPropagation();</div><div class=\"line\"></div><div class=\"line\">    //将应用逻辑分离在其他个函数中</div><div class=\"line\">    // Good</div><div class=\"line\">    App.getUsers();</div><div class=\"line\">    App.renderUsers();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p><strong>1.3.2 松散解耦原则</strong></p>\n<ul>\n<li>不要将event对象传给其他方法，只传递来自event对象中的某些数据。</li>\n<li>任何事件处理程序都应该只处理事件，然后将处理转交给应用逻辑。</li>\n</ul>\n<p><strong>1.3.3 将异步请求和数据处理解耦</strong></p>\n<ul>\n<li>错误做法：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Bad</div><div class=\"line\">ReqApi.tenant.queryUsers(&#123;&#125;,function(res)&#123;</div><div class=\"line\">    if(!res.success)&#123;</div><div class=\"line\">        console.error(res);</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //对数据的处理</div><div class=\"line\">    ...</div><div class=\"line\">    ...</div><div class=\"line\">    ...</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上面代码对数据的处理直接写死在异步请求里面，如果换了一个请求，但是数据处理方式是一样的，那么又要复制一遍数据处理的代码。最好的方式是将数据处理模块化成为一个函数。\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Good</div><div class=\"line\">ReqApi.tenant.queryUsers(&#123;&#125;,function(res)&#123;</div><div class=\"line\">    if(!res.success)&#123;</div><div class=\"line\">        console.error(res);</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //对数据的处理</div><div class=\"line\">    App.renderUsers(res.data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>ps:异步请求只处理请求，不处理数据。函数的功能要专一，功能粒度不可分割。</p>\n<p><strong>1.3.4 不要将某个变量写死在函数中，尽量使用参数传递进去</strong></p>\n<p>如果你需要一个函数去验证输入框是否是空，如下。这种方式就会绑定死了这个只能验证id为test的输入框，换成其他的就不行。\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">// bad</div><div class=\"line\">function checkInputIsEmpty()&#123;</div><div class=\"line\">    var value = $(&apos;#test&apos;).val();</div><div class=\"line\">    if(value)&#123;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">    else&#123;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// good</div><div class=\"line\">function isEmptyInput(id)&#123;</div><div class=\"line\">    var value = $(&apos;#&apos;+id).val();</div><div class=\"line\">    if(value)&#123;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">    else&#123;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"1-4-编程实践\"><a href=\"#1-4-编程实践\" class=\"headerlink\" title=\"1.4 编程实践\"></a>1.4 编程实践</h2><p><strong>1.4.1 尊重对象所有权</strong></p>\n<p>javascript的动态性质决定了几乎属于它的任何东西在任何时间都能发生更改，这样就很可能会篡改一些默认的方法，从而导致一些灾难性的后果。<em>如果你不负责或者维护某一个对象，那么你就不能对它进行更改。</em></p>\n<pre><code>* 不要为实例或原型添加属性和方法\n* 不要重定义已存在的方法\n</code></pre><p><strong>1.4.2 避免全局变量</strong></p>\n<p><em>避免全局变量的深层原因在于避免作用域污染</em></p>\n<p><em>作用域就像空气，你时时刻刻不在呼吸，但你往往感觉不到它的存在。一旦它本污染。你就会感到窒息</em>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Bad 两个全局变量</div><div class=\"line\">var name = &quot;wdd&quot;;</div><div class=\"line\">funtion getName()&#123;</div><div class=\"line\">    console.log(name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// Good 一个全局变量</div><div class=\"line\">var App = &#123;</div><div class=\"line\">    name:&quot;wdd&quot;,</div><div class=\"line\">    sayName:funtion()&#123;</div><div class=\"line\">        console.log(this.name);//如果这个函数当做回调数使用，这个this可能指向window,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><strong>1.4.3 避免与null进行比较</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">//Bad</div><div class=\"line\">funtion sortArray(values)&#123;</div><div class=\"line\">    // 避免</div><div class=\"line\">    if(values != null)&#123;</div><div class=\"line\">        values.sort(comparator);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//Good</div><div class=\"line\">function sortArray(values)&#123;</div><div class=\"line\">    // 推荐</div><div class=\"line\">    if(values instanceof Array)&#123;</div><div class=\"line\">        values.sort(compartor);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>与null进行比较的代码，可以用以下技术进行替换\n&gt;</p>\n<ul>\n<li>如果值是一个应用类型，使用instanceof操作符，检查其构造函数</li>\n<li>如果值是基本类型，使用typeof检查其类型</li>\n<li>如果是希望对象包含某个特定的方法名，则只用typeof操作符确保指定名字的方法存在于对象上。</li>\n</ul>\n<p><strong><em>代码中与null比较越少，就越容易确定代码的目的，消除不必要的错误。</em></strong></p>\n<p><strong>1.4.4 从代码中分离配置文件</strong></p>\n<p>配置数据是一些硬代码(hardcoded),看下面的例子：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function validate(value)&#123;</div><div class=\"line\">    if(!value)&#123;</div><div class=\"line\">        alert(&apos;Invalid value&apos;);</div><div class=\"line\">        location.href = &apos;/errors/invalid.php&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码里有两个配置数据，一个是UI字符串(‘Invalid value’),另一个是一个Url(‘/error/invalid.php’)。如果你把他们写死在代码里，那么如果当你需要修改这些地方的时候，那么你必须一处一处的检查并修改，而且还可能会遗漏。</p>\n<p>所以第一步是要区分，哪些代码应该写成配置文件的形式？</p>\n<pre><code>* 显示在UI元素中的字符串\n* URL\n* 一些重复的唯一值（例如URL）\n* 一些设置变量\n* 任何可能改变的值\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Config = &#123;</div><div class=\"line\">    &quot;MSG_INVALID_VALUE&quot;:&quot;Invalid value&quot;,</div><div class=\"line\">    &quot;URL_INVALID&quot;:&quot;/errors/invalid.php&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>1.4.5 调试信息开关</strong></p>\n<p>在开发过程中，可能随处留下几个console.log,或者alert语句，这些语句在开发过程中是很有价值的。但是项目一旦进入生产环境，过多的console.log可能影响到浏览器的运行效率，过多的alert会降低程序的用户体验。而我们最好不要在进入生产环境前，一处一处像扫雷一样删除或者注释掉这些调试语句。</p>\n<blockquote>\n<p>最好的方法就是设置一个开关</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">//全局命令空间</div><div class=\"line\">var App = &#123;</div><div class=\"line\">    debug:true,</div><div class=\"line\">    log:function(msg)&#123;</div><div class=\"line\">        if(debug)&#123;</div><div class=\"line\">            console.log(msg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    alert:function(msg)&#123;</div><div class=\"line\">        if(debug)&#123;</div><div class=\"line\">            alert(msg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">//使用</div><div class=\"line\">App.log(&apos;获取用户信息成功&apos;);</div><div class=\"line\">App.alert(&apos;密码不匹配&apos;);</div><div class=\"line\"></div><div class=\"line\">//关闭日志输出与alert</div><div class=\"line\">App.debug = false;</div></pre></td></tr></table></figure>\n<p><strong>1.4.6 使用jQuery Promise</strong></p>\n<p>没有使用promise之前的回调函数写法：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">// bad：没使用promise之前的回调函数写法</div><div class=\"line\">function sendRequest(req,successCallback,errorCallback)&#123;</div><div class=\"line\">    var inputData = req.data || &#123;&#125;;</div><div class=\"line\">    inputData = JSON.stringify(inputData);</div><div class=\"line\">    $.ajax(&#123;</div><div class=\"line\">        url:req.base+req.destination,</div><div class=\"line\">        type:req.type || &quot;get&quot;,</div><div class=\"line\">        headers:&#123;</div><div class=\"line\">            sessionId:session.id</div><div class=\"line\">        &#125;,</div><div class=\"line\">        data:inputData,</div><div class=\"line\">        dataType:&quot;json&quot;,</div><div class=\"line\">        contentType : &apos;application/json; charset=UTF-8&apos;,</div><div class=\"line\">        success:function(data)&#123;</div><div class=\"line\">            successCallback(data);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        error:function(data)&#123;</div><div class=\"line\">            console.error(data);</div><div class=\"line\">            errorCallback(data);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//调用</div><div class=\"line\">sendRequest(req,function(res)&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;,function(res)&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>使用promise之后\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">function sendRequest(req)&#123;</div><div class=\"line\">    var $dfd = $.Deferred();</div><div class=\"line\">    var inputData = req.data || &#123;&#125;;</div><div class=\"line\">    inputData = JSON.stringify(inputData);</div><div class=\"line\">    $.ajax(&#123;</div><div class=\"line\">        url:req.base+req.destination,</div><div class=\"line\">        type:req.type || &quot;get&quot;,</div><div class=\"line\">        headers:&#123;</div><div class=\"line\">            sessionId:session.id</div><div class=\"line\">        &#125;,</div><div class=\"line\">        data:inputData,</div><div class=\"line\">        dataType:&quot;json&quot;,</div><div class=\"line\">        contentType : &apos;application/json; charset=UTF-8&apos;,</div><div class=\"line\">        success:function(data)&#123;</div><div class=\"line\">            $dfd.resolve(data);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        error:function(data)&#123;</div><div class=\"line\">            $dfd.reject(data);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    return $dfd.promise();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//调用</div><div class=\"line\">sendRequest(req)</div><div class=\"line\">.done(function()&#123;</div><div class=\"line\">    //请求成功</div><div class=\"line\">    ...</div><div class=\"line\">&#125;)</div><div class=\"line\">.fail(function()&#123;</div><div class=\"line\">    //请求失败</div><div class=\"line\">    ...</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p><strong>1.4.7 显示错误提醒，不要给后端接口背锅</strong></p>\n<p>假如前端要去接口获取用户信息并显示出来，如果你的请求格式是正确的，但是接口返回400以上的错误，你必须通过提醒来告知测试，这个错误是接口的返回错误，而不是前端的逻辑错误。</p>\n<p><strong>1.4.8 Restful接口请求</strong>\n&gt;\n对资源的操作包括获取、创建、修改和删除资源，这些操作正好对应HTTP协议提供的GET、POST、PUT和DELETE方法。</p>\n<table>\n    <thead>\n        <tr>\n            <th>请求类型</th>\n            <th>接口前缀</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>GET</td>\n            <td>.get</td>\n        </tr>\n        <tr>\n            <td>POST</td>\n            <td>.create</td>\n        </tr>\n        <tr>\n            <td>PUT</td>\n            <td>.update</td>\n        </tr>\n        <tr>\n            <td>DELETE</td>\n            <td>.delete</td>\n        </tr>\n    </tbody>\n</table>\n\n<p><em>有些接口获取某一些资源虽然是post请求，但是它的行为是get，所以建议使用.get</em></p>\n<p>示例：</p>\n<pre><code>// 与用户相关的接口\nApp.api.user = {};\n\n// 获取一个用户: 一般来说是一个指定的Id，例如userId\nApp.api.user.getUser = function(){\n    ...\n};\n\n// 获取一组用户: 一般来说是一些条件，获取条件下的用户，筛选符合条件的用户\nApp.api.user.getUsers = function(){\n    ...\n};\n\n// 创建一个用户\nApp.api.user.createUser = function(){\n\n};\n\n// 创建一组用户\nApp.api.user.createUsers = function(){\n\n};\n\n// 更新一个用户\nApp.api.user.updateUser = function(){\n\n};\n\n// 更新一组用户\nApp.api.user.updateUsers = function(){\n\n};\n\n// 更新一个用户\nApp.api.user.updateUser = function(){\n\n};\n\n// 更新一组用户\nApp.api.user.updateUsers = function(){\n\n};\n\n// 删除一个用户\nApp.api.user.deleteUser = function(){\n\n};\n\n// 删除一组用户\nApp.api.user.deleteUsers = function(){\n\n};\n</code></pre><h1 id=\"2-性能\"><a href=\"#2-性能\" class=\"headerlink\" title=\"2 性能\"></a>2 性能</h1><h2 id=\"2-1-注意作用域\"><a href=\"#2-1-注意作用域\" class=\"headerlink\" title=\"2.1 注意作用域\"></a>2.1 注意作用域</h2><ul>\n<li>避免全局查找</li>\n<li>避免with语句,虽然方便，但是这个会进行全局搜索。\n提示：with语句的用法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Lakers() &#123;  </div><div class=\"line\">       this.name = &quot;kobe bryant&quot;;  </div><div class=\"line\">       this.age = &quot;28&quot;;  </div><div class=\"line\">       this.gender = &quot;boy&quot;;  </div><div class=\"line\">&#125;  </div><div class=\"line\">var people=new Lakers();  </div><div class=\"line\">with(people)  </div><div class=\"line\">&#123;  </div><div class=\"line\">       var str = &quot;姓名: &quot; + name + &quot;&lt;br&gt;&quot;;  </div><div class=\"line\">       str += &quot;年龄：&quot; + age + &quot;&lt;br&gt;&quot;;  </div><div class=\"line\">       str += &quot;性别：&quot; + gender;  </div><div class=\"line\">       document.write(str);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"2-2-选择正确的方法\"><a href=\"#2-2-选择正确的方法\" class=\"headerlink\" title=\"2.2 选择正确的方法\"></a>2.2 选择正确的方法</h2><ul>\n<li><p>优化循环</p>\n  <ul>\n      <li><em>减值迭代：从最大值开始，在循环中不断减值的迭代器更加高效。</em></li>\n      <li><em>简化终止条件：由于每次循环过程都会计算终止条件，所以必须保证它尽可能快。也就是避免其他属性查找。</em></li>\n      <li><em>简化循环体：由于循环体是执行最多的，所以要确保其最大限度地优化。</em></li>\n  </ul>\n</li>\n<li><p>展开循环</p>\n</li>\n<li><p>避免双重解释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// **Bad** 某些代码求值</div><div class=\"line\">eval(&quot;alert(&apos;hello&apos;)&quot;);</div><div class=\"line\"></div><div class=\"line\">// **Bad** 创建新函数</div><div class=\"line\">var sayHi = new Function(&quot;alert(&apos;hello&apos;)&quot;);</div><div class=\"line\"></div><div class=\"line\">// **Bad** 设置超时</div><div class=\"line\">setTimeout(&quot;alert(&apos;hello&apos;)&quot;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>性能的其他注意事项</p>\n  <ul>\n      <li>原生方法较快</li>\n      <li>switch语句较快：可以适当的替换ifelse语句case 的分支不要超过128条</li>\n      <li>位运算符较快</li>\n  </ul>\n\n</li>\n</ul>\n<h2 id=\"2-3-最小化语句数\"><a href=\"#2-3-最小化语句数\" class=\"headerlink\" title=\"2.3 最小化语句数\"></a>2.3 最小化语句数</h2><p>多个变量声明：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 方式1：Bad</div><div class=\"line\">var count = 5;</div><div class=\"line\">var name = &apos;wdd&apos;;</div><div class=\"line\">var sex = &apos;male&apos;;</div><div class=\"line\">var age = 10;</div><div class=\"line\"></div><div class=\"line\">// 方式2：Good</div><div class=\"line\">var count = 5,</div><div class=\"line\">    name = &apos;wdd&apos;,</div><div class=\"line\">    sex = &apos;male&apos;,</div><div class=\"line\">    age = 10;</div><div class=\"line\">_如果你觉得可读性变差了，可以不使用，个人很是喜欢这么写_</div></pre></td></tr></table></figure></p>\n<p>插入迭代值\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Good</div><div class=\"line\">var name = values[i++];</div></pre></td></tr></table></figure></p>\n<p>使用数组和对象字面量\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Good</div><div class=\"line\">var values = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];</div><div class=\"line\"></div><div class=\"line\">var person = &#123;</div><div class=\"line\">    name:&apos;wdd&apos;,</div><div class=\"line\">    age:10</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">提示：只要有可能，尽量使用数组和对象字面量的表达式来消除不必要的语句</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-4-优化DOM交互\"><a href=\"#2-4-优化DOM交互\" class=\"headerlink\" title=\"2.4 优化DOM交互\"></a>2.4 优化DOM交互</h2><p>&gt;\n在JavaScript各个方面中，DOM无疑是最慢的一部分。DOM操作与交互要消耗大量的时间。因为他们往往需要重新渲染整个页面或者某一部分。进一步说，看似细微的操作也可能花很久来执行。因为DOM要处理非常多的信息。理解如何优化与DOM的交互可以极大的提高脚本完成的速度。</p>\n<ul>\n<li>使用dom缓存技术</li>\n<li>最小化现场更新</li>\n<li>使用innerHTML插入大段的html</li>\n<li>使用事件代理</li>\n</ul>\n<p><strong>2.4.1 Dom缓存技术</strong></p>\n<p>调用频率非常高的dom查找，可以将Dom缓存于一个变量中\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 最简单的dom缓存</div><div class=\"line\"></div><div class=\"line\">var domCache = &#123;&#125;;</div><div class=\"line\">//如果之前查过一次，就用缓存中的</div><div class=\"line\">function myGetElement(tag)&#123;</div><div class=\"line\">    return domCache[tag] = domCache[tag] || $(tag);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-5-避免过长的属性查找，设置一个快捷方式\"><a href=\"#2-5-避免过长的属性查找，设置一个快捷方式\" class=\"headerlink\" title=\"2.5 避免过长的属性查找，设置一个快捷方式\"></a>2.5 避免过长的属性查找，设置一个快捷方式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 先看下面的极端情况</div><div class=\"line\">app.user.mother.parent.home.name = &apos;haha&apos;</div><div class=\"line\">app.user.mother.parent.home.adderess = &apos;上海&apos;</div><div class=\"line\">app.user.mother.parent.home.weather = &apos;晴天&apos;</div><div class=\"line\"></div><div class=\"line\">// 更优雅的方式</div><div class=\"line\">var home = app.user.mother.parent.home;</div><div class=\"line\">home.name = &apos;haha&apos;;</div><div class=\"line\">home.address = &apos;上海&apos;,</div><div class=\"line\">home.weather = &apos;晴天&apos;</div></pre></td></tr></table></figure>\n<p>注意：\n&gt;\n使用上面的方式是有前提的，必须保证app.user.mather.parent.home是一个对象，因为对象是传递的引用。如果他的类型是一个基本类型，例如：number,string,boolean，那么复制操作仅仅是值传递，新定义的home的改变，并不会影响到app.user.mather.parent.home的改变。</p>\n<h1 id=\"3-快捷方式\"><a href=\"#3-快捷方式\" class=\"headerlink\" title=\"3 快捷方式\"></a>3 快捷方式</h1><h2 id=\"3-1-字符串转数字\"><a href=\"#3-1-字符串转数字\" class=\"headerlink\" title=\"3.1 字符串转数字\"></a>3.1 字符串转数字</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">+&apos;4.1&apos; === 4.1  //true</div></pre></td></tr></table></figure>\n<h2 id=\"3-2-数字转字符\"><a href=\"#3-2-数字转字符\" class=\"headerlink\" title=\"3.2 数字转字符\"></a>3.2 数字转字符</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">4.1+&quot;&quot;===&quot;4.1&quot;  //true</div></pre></td></tr></table></figure>\n<h2 id=\"3-3-字符串取整\"><a href=\"#3-3-字符串取整\" class=\"headerlink\" title=\"3.3 字符串取整\"></a>3.3 字符串取整</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;4.99&apos; | 0===4  //true</div></pre></td></tr></table></figure>\n<h1 id=\"4-推荐阅读\"><a href=\"#4-推荐阅读\" class=\"headerlink\" title=\"4 推荐阅读\"></a>4 推荐阅读</h1><ul>\n<li><a href=\"https://book.douban.com/subject/10797189/\" target=\"_blank\">《编写可读代码的艺术》</a></li>\n<li><a href=\"https://book.douban.com/subject/21792530/\" target=\"_blank\">《编写可维护的javascript》</a></li>\n<li><a href=\"https://book.douban.com/subject/26638316/\" target=\"_blank\">《JavaScript忍者秘籍》</a></li>\n</ul>\n<p>写在最后的话：</p>\n<ul>\n<li>这篇文章原文出自我同事：\n<a href=\"https://segmentfault.com/a/1190000007101196\" target=\"_blank\">前端干货之JS最佳实践</a></li>\n</ul>\n<p>我们毕业于一所大学，一起进公司实习，通过试用，最后转正。转眼间已经一年半了。\n刚到公司那会儿，在没有前端前辈带我们的情况下，我们走了很多弯路，如今再看看我们以前敲的那些代码简直是不忍回去再看。也多亏了我这位同事善于钻研，带着我学习了很多新东西。他以后肯定会成为一个前端大牛的，恩~我也会努力成为一名前端大牛的。</p>\n","primarycolor":"blueGrey","accentcolor":"blueGrey","categories":[{"name":"规范","path":"api/categories/规范.json"}],"tags":[{"name":"前端","path":"api/tags/前端.json"}]}